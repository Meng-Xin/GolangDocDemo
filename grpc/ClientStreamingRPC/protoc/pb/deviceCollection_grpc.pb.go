// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc3
// source: deviceCollection.proto

// 指定包名

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceInformationCollectionService_SendStatus_FullMethodName = "/pb.DeviceInformationCollectionService/SendStatus"
)

// DeviceInformationCollectionServiceClient is the client API for DeviceInformationCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInformationCollectionServiceClient interface {
	SendStatus(ctx context.Context, opts ...grpc.CallOption) (DeviceInformationCollectionService_SendStatusClient, error)
}

type deviceInformationCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInformationCollectionServiceClient(cc grpc.ClientConnInterface) DeviceInformationCollectionServiceClient {
	return &deviceInformationCollectionServiceClient{cc}
}

func (c *deviceInformationCollectionServiceClient) SendStatus(ctx context.Context, opts ...grpc.CallOption) (DeviceInformationCollectionService_SendStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInformationCollectionService_ServiceDesc.Streams[0], DeviceInformationCollectionService_SendStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInformationCollectionServiceSendStatusClient{stream}
	return x, nil
}

type DeviceInformationCollectionService_SendStatusClient interface {
	Send(*DeviceStatusUpdate) error
	CloseAndRecv() (*DeviceStatusResponse, error)
	grpc.ClientStream
}

type deviceInformationCollectionServiceSendStatusClient struct {
	grpc.ClientStream
}

func (x *deviceInformationCollectionServiceSendStatusClient) Send(m *DeviceStatusUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceInformationCollectionServiceSendStatusClient) CloseAndRecv() (*DeviceStatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeviceStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceInformationCollectionServiceServer is the server API for DeviceInformationCollectionService service.
// All implementations must embed UnimplementedDeviceInformationCollectionServiceServer
// for forward compatibility
type DeviceInformationCollectionServiceServer interface {
	SendStatus(DeviceInformationCollectionService_SendStatusServer) error
	mustEmbedUnimplementedDeviceInformationCollectionServiceServer()
}

// UnimplementedDeviceInformationCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceInformationCollectionServiceServer struct {
}

func (UnimplementedDeviceInformationCollectionServiceServer) SendStatus(DeviceInformationCollectionService_SendStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStatus not implemented")
}
func (UnimplementedDeviceInformationCollectionServiceServer) mustEmbedUnimplementedDeviceInformationCollectionServiceServer() {
}

// UnsafeDeviceInformationCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInformationCollectionServiceServer will
// result in compilation errors.
type UnsafeDeviceInformationCollectionServiceServer interface {
	mustEmbedUnimplementedDeviceInformationCollectionServiceServer()
}

func RegisterDeviceInformationCollectionServiceServer(s grpc.ServiceRegistrar, srv DeviceInformationCollectionServiceServer) {
	s.RegisterService(&DeviceInformationCollectionService_ServiceDesc, srv)
}

func _DeviceInformationCollectionService_SendStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceInformationCollectionServiceServer).SendStatus(&deviceInformationCollectionServiceSendStatusServer{stream})
}

type DeviceInformationCollectionService_SendStatusServer interface {
	SendAndClose(*DeviceStatusResponse) error
	Recv() (*DeviceStatusUpdate, error)
	grpc.ServerStream
}

type deviceInformationCollectionServiceSendStatusServer struct {
	grpc.ServerStream
}

func (x *deviceInformationCollectionServiceSendStatusServer) SendAndClose(m *DeviceStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceInformationCollectionServiceSendStatusServer) Recv() (*DeviceStatusUpdate, error) {
	m := new(DeviceStatusUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceInformationCollectionService_ServiceDesc is the grpc.ServiceDesc for DeviceInformationCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInformationCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeviceInformationCollectionService",
	HandlerType: (*DeviceInformationCollectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStatus",
			Handler:       _DeviceInformationCollectionService_SendStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deviceCollection.proto",
}
